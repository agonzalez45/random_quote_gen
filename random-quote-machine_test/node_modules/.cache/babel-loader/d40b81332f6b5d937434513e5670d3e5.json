{"ast":null,"code":"var _jsxFileName = \"/Users/adolfogonzalez/Desktop/prenda/random-quote-machine/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Button from './components/Button';\nimport React, { useEffect, useState } from \"react\";\nimport random from 'random';\nimport QuoteDiv from \"./components/Quote\";\nimport LikeButton from './components/LikeButton'; //import mongoose from 'mongoose';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb+srv://bito94:bH7WWgibBDj29DHI@cluster0.c79rp.mongodb.net/myFirstDatabase?retryWrites=true&w=majority', () => console.log(\"Connected\"));\n\nfunction App() {\n  _s();\n\n  //const mongoose = require('mongoose');\n  //state variables\n  const [quotesList, setQuotesList] = useState([]);\n  const [quote, setQuote] = useState({});\n  const [like, setLike] = useState([]); //mongoose.connect('mongodb+srv://bito94:bH7WWgibBDj29DHI@cluster0.c79rp.mongodb.net/myFirstDatabase?retryWrites=true&w=majority', () => \n  //  console.log(\"Connected\")\n  //);\n\n  const addLike = () => {\n    let newCount = 1;\n    console.log(newCount);\n    setLike(newCount);\n  };\n\n  let quoteList; //this is use to run on start\n\n  useEffect(async () => {\n    if (quotesList.length === 0) {\n      const quotesResult = await fetch(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"); //console.log(quotesResult.json());\n\n      quoteList = await quotesResult.json();\n      setQuotesList(quoteList.quotes);\n    } else {\n      setRandomQuote(quotesList);\n    } //if quoteslist isnt added here, it keeps rerendering forever\n\n  }, [quotesList]);\n\n  const setRandomQuote = list => {\n    const randNum = randIndex(list.length);\n\n    while (list[randNum].quote === quote.quote) {\n      randNum = randIndex(list.length);\n    }\n\n    console.log(list[randNum].quote);\n    setQuote(list[randNum]);\n  };\n\n  const randIndex = quotesLen => {\n    //console.log(quoteList.quotes.length)\n    console.log(quotesLen);\n\n    if (!quotesLen) {\n      return;\n    }\n\n    return Math.floor(Math.random() * quotesLen);\n  };\n\n  function nextQuoteClickHandler() {\n    setRandomQuote(quotesList);\n  }\n\n  function clickLike() {\n    addLike();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    id: \"quote-box\",\n    children: [/*#__PURE__*/_jsxDEV(QuoteDiv, {\n      value: quote,\n      onQuoteChange: () => setRandomQuote(quotesList)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      buttonDisplayName: \"Next Quote\",\n      clickHandler: nextQuoteClickHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LikeButton, {\n      clickHandler: clickLike\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"/Ah9ouQZO0gI6djYLa9KzX91WOc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/adolfogonzalez/Desktop/prenda/random-quote-machine/src/App.jsx"],"names":["Button","React","useEffect","useState","random","QuoteDiv","LikeButton","mongoose","require","connect","console","log","App","quotesList","setQuotesList","quote","setQuote","like","setLike","addLike","newCount","quoteList","length","quotesResult","fetch","json","quotes","setRandomQuote","list","randNum","randIndex","quotesLen","Math","floor","nextQuoteClickHandler","clickLike"],"mappings":"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","sourcesContent":["import './App.css';\nimport Button from './components/Button';\nimport React, { useEffect, useState } from \"react\";\nimport random from 'random'\nimport QuoteDiv from \"./components/Quote\";\nimport LikeButton from './components/LikeButton';\n//import mongoose from 'mongoose';\n\nconst mongoose = require('mongoose');\nmongoose.connect('mongodb+srv://bito94:bH7WWgibBDj29DHI@cluster0.c79rp.mongodb.net/myFirstDatabase?retryWrites=true&w=majority', () => \n    console.log(\"Connected\")\n  );\nfunction App() {\n  //const mongoose = require('mongoose');\n\n\n  //state variables\n  const [quotesList, setQuotesList] = useState([]);\n  const [quote, setQuote] = useState({});\n  const [like, setLike] = useState([]);\n\n  //mongoose.connect('mongodb+srv://bito94:bH7WWgibBDj29DHI@cluster0.c79rp.mongodb.net/myFirstDatabase?retryWrites=true&w=majority', () => \n  //  console.log(\"Connected\")\n  //);\n\n  const addLike = () => {\n    let newCount = 1;\n    console.log(newCount);\n    setLike(newCount);\n  }\n\n\n  let quoteList;\n  \n  //this is use to run on start\n  useEffect(async () => {\n    if (quotesList.length === 0) {\n      const quotesResult = await fetch(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\");\n      //console.log(quotesResult.json());\n      quoteList = await (quotesResult.json());\n      \n      setQuotesList(quoteList.quotes)\n    }\n    else{\n      setRandomQuote(quotesList)\n    }\n    //if quoteslist isnt added here, it keeps rerendering forever\n  },[quotesList])\n\n\n  const setRandomQuote = list => {\n    const randNum = randIndex(list.length);\n    while(list[randNum].quote === quote.quote){\n      randNum = randIndex(list.length);\n    }\n    console.log(list[randNum].quote)\n    setQuote(list[randNum])\n  }\n  \n  const randIndex =  (quotesLen) => {\n    //console.log(quoteList.quotes.length)\n    console.log(quotesLen)\n    if(!quotesLen) {\n      return;\n    }\n    return Math.floor(Math.random()*quotesLen);\n  }\n\n  function nextQuoteClickHandler(){\n    setRandomQuote(quotesList)\n    \n  }\n  function clickLike(){\n    addLike()\n  }\n  \n  return (\n    <div className=\"App\" id=\"quote-box\" >\n      <QuoteDiv \n        value={quote}\n        onQuoteChange={() => setRandomQuote(quotesList)}\n      />\n      <Button buttonDisplayName=\"Next Quote\" clickHandler={nextQuoteClickHandler}/>\n      <LikeButton clickHandler={clickLike}/>\n      {/*<div>\n          <button\n            className=\"button\"\n            onClick={addLike}\n          >addlike\n          </button>\n      </div>*/}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}