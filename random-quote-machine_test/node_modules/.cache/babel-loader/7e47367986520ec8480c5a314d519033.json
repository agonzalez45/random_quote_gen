{"ast":null,"code":"var _jsxFileName = \"/Users/adolfogonzalez/Desktop/bottombar/random-quote-machine_test/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Button from './components/Button';\nimport React, { useEffect, useState } from \"react\";\nimport random from 'random';\nimport QuoteDiv from \"./components/Quote\";\nimport Block from \"./components/Block\";\nimport LikeButton from './components/LikeButton';\nimport { AxiosProvider, Request, Get, Delete, Head, Post, Put, Patch, withAxios } from 'react-axios';\nimport axios from 'axios';\nimport Slider from \"react-slick\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //const [showDiv, setState] = useState();\n  const [show, setShow] = useState(false); //const mongoose = require('mongoose');\n  //const url = 'mongodb+srv://bito94:bH7WWgibBDj29DHI@cluster0.c79rp.mongodb.net/myFirstDatabase?retryWrites=true&w=majority';\n  //const client = new MongoClient(url);\n  //mongoose.connect(url)\n\n  /*\n  async function run() {\n    try {\n        await client.connect();\n        console.log(\"Connected correctly to server\");\n    } catch (err) {\n        console.log(err.stack);\n    }\n    finally {\n        await client.close();\n    }\n  }\n  run().catch(console.dir);\n  */\n  //state variables\n\n  const [quotesList, setQuotesList] = useState([]);\n  const [quote, setQuote] = useState({});\n  const [like, setLike] = useState([]);\n  const [likedQuotes, setLikedQuotes] = useState([]);\n  const [listItems, setListItems] = useState([]);\n\n  const addLike = () => {\n    let newCount = 1;\n    console.log(newCount);\n    setLike(newCount);\n    sendGetRequest();\n  }; //returns liked quotes\n\n\n  const sendGetRequest = async () => {\n    try {\n      const resp = await axios.get('http://localhost:5000/personnel'); //console.log(resp.data);\n\n      console.log(\"sendgetreq\");\n      setLikedQuotes(resp.data);\n      console.log(resp.data); //setListItems(resp.data)\n\n      const das = resp.data[0];\n      console.log(resp.data);\n      setListItems(Object.values(das).map(ds => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: ds\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this))); /////////////////\n\n      const allQuestions = [];\n      const allChoices = [];\n      resp.data.forEach(({\n        question,\n        choices\n      }) => {\n        allQuestions.push(question);\n        allChoices.push(choices);\n      }); //const newmap = JSON.parse(resp.data[0]);\n      /////console.log(newmap)\n      //const newmap1 = newmap.map(( newmap) => \n      //  <li>{newmap}</li>\n      //);\n      //setListItems(newmap1)\n    } catch (err) {\n      // Handle Error Here\n      console.error(err);\n    }\n  };\n\n  let quoteList; //this is use to run on start\n\n  useEffect(async () => {\n    if (quotesList.length === 0) {\n      const quotesResult = await fetch(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"); //console.log(quotesResult.json());\n\n      quoteList = await quotesResult.json();\n      setQuotesList(quoteList.quotes);\n    } else {\n      setRandomQuote(quotesList);\n      sendGetRequest();\n    } //if quoteslist isnt added here, it keeps rerendering forever\n\n  }, [quotesList]); ////////////////////////\n\n  console.log(likedQuotes[0]);\n  console.log(quote);\n\n  const setRandomQuote = list => {\n    const randNum = randIndex(list.length);\n\n    while (list[randNum].quote === quote.quote) {\n      randNum = randIndex(list.length);\n    }\n\n    console.log(list[randNum].quote);\n    setQuote(list[randNum]);\n  };\n\n  const randIndex = quotesLen => {\n    //console.log(quoteList.quotes.length)\n    console.log(quotesLen);\n\n    if (!quotesLen) {\n      return;\n    }\n\n    return Math.floor(Math.random() * quotesLen);\n  };\n\n  function nextQuoteClickHandler() {\n    setRandomQuote(quotesList);\n  }\n\n  function clickLike() {\n    addLike();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    id: \"quote-box\",\n    children: [/*#__PURE__*/_jsxDEV(QuoteDiv, {\n      value: quote,\n      onQuoteChange: () => setRandomQuote(quotesList)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      buttonDisplayName: \"Next Quote\",\n      clickHandler: nextQuoteClickHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LikeButton, {\n      clickHandler: clickLike\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShow(prev => !prev),\n      children: \"Show liked quotes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), show && /*#__PURE__*/_jsxDEV(Block, {\n      value: likedQuotes[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: listItems.map((quote, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: quote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"HNANkbnncgiVK0NBvVNkSW+34Qo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/adolfogonzalez/Desktop/bottombar/random-quote-machine_test/src/App.jsx"],"names":["Button","React","useEffect","useState","random","QuoteDiv","Block","LikeButton","AxiosProvider","Request","Get","Delete","Head","Post","Put","Patch","withAxios","axios","Slider","App","show","setShow","quotesList","setQuotesList","quote","setQuote","like","setLike","likedQuotes","setLikedQuotes","listItems","setListItems","addLike","newCount","console","log","sendGetRequest","resp","get","data","das","Object","values","map","ds","allQuestions","allChoices","forEach","question","choices","push","err","error","quoteList","length","quotesResult","fetch","json","quotes","setRandomQuote","list","randNum","randIndex","quotesLen","Math","floor","nextQuoteClickHandler","clickLike","prev","index"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,SAASC,aAAT,EAAwBC,OAAxB,EAAiCC,GAAjC,EAAsCC,MAAtC,EAA8CC,IAA9C,EAAoDC,IAApD,EAA0DC,GAA1D,EAA+DC,KAA/D,EAAsEC,SAAtE,QAAuF,aAAvF;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,OAAOC,MAAP,MAAmB,aAAnB;;;AAIA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBlB,QAAQ,CAAC,KAAD,CAAhC,CAFa,CAIb;AAEA;AACA;AACA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIE;;AACA,QAAM,CAACmB,UAAD,EAAaC,aAAb,IAA8BpB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACqB,KAAD,EAAQC,QAAR,IAAoBtB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACuB,IAAD,EAAOC,OAAP,IAAkBxB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACyB,WAAD,EAAcC,cAAd,IAAgC1B,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAM,CAAC2B,SAAD,EAAYC,YAAZ,IAA4B5B,QAAQ,CAAC,EAAD,CAA1C;;AAMA,QAAM6B,OAAO,GAAG,MAAM;AACpB,QAAIC,QAAQ,GAAG,CAAf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAN,IAAAA,OAAO,CAACM,QAAD,CAAP;AACAG,IAAAA,cAAc;AACf,GALD,CAtCa,CA4Cb;;;AACA,QAAMA,cAAc,GAAG,YAAY;AACjC,QAAI;AACA,YAAMC,IAAI,GAAG,MAAMpB,KAAK,CAACqB,GAAN,CAAU,iCAAV,CAAnB,CADA,CAEA;;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAN,MAAAA,cAAc,CAACQ,IAAI,CAACE,IAAN,CAAd;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYE,IAAI,CAACE,IAAjB,EALA,CAMA;;AACA,YAAMC,GAAG,GAAGH,IAAI,CAACE,IAAL,CAAU,CAAV,CAAZ;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYE,IAAI,CAACE,IAAjB;AAEAR,MAAAA,YAAY,CAACU,MAAM,CAACC,MAAP,CAAcF,GAAd,EAAmBG,GAAnB,CAAwBC,EAAD,iBAClC;AAAA,kBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,cADW,CAAD,CAAZ,CAVA,CAcA;;AACA,YAAMC,YAAY,GAAG,EAArB;AACA,YAAMC,UAAU,GAAG,EAAnB;AAEAT,MAAAA,IAAI,CAACE,IAAL,CAAUQ,OAAV,CAAkB,CAAC;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,OAAD,KAA2B;AAC3CJ,QAAAA,YAAY,CAACK,IAAb,CAAkBF,QAAlB;AACAF,QAAAA,UAAU,CAACI,IAAX,CAAgBD,OAAhB;AACD,OAHD,EAlBA,CAsBA;AACA;AACA;AACA;AACA;AACA;AACH,KA5BD,CA4BE,OAAOE,GAAP,EAAY;AACV;AACAjB,MAAAA,OAAO,CAACkB,KAAR,CAAcD,GAAd;AACH;AACJ,GAjCC;;AAmCA,MAAIE,SAAJ,CAhFa,CAkFb;;AACAnD,EAAAA,SAAS,CAAC,YAAY;AACpB,QAAIoB,UAAU,CAACgC,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,YAAMC,YAAY,GAAG,MAAMC,KAAK,CAAC,wIAAD,CAAhC,CAD2B,CAE3B;;AACAH,MAAAA,SAAS,GAAG,MAAOE,YAAY,CAACE,IAAb,EAAnB;AAEAlC,MAAAA,aAAa,CAAC8B,SAAS,CAACK,MAAX,CAAb;AAED,KAPD,MAQI;AACFC,MAAAA,cAAc,CAACrC,UAAD,CAAd;AACAc,MAAAA,cAAc;AACf,KAZmB,CAcpB;;AACD,GAfQ,EAeP,CAACd,UAAD,CAfO,CAAT,CAnFa,CAmGf;;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAYP,WAAW,CAAC,CAAD,CAAvB;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ;;AACE,QAAMmC,cAAc,GAAGC,IAAI,IAAI;AAC7B,UAAMC,OAAO,GAAGC,SAAS,CAACF,IAAI,CAACN,MAAN,CAAzB;;AACA,WAAMM,IAAI,CAACC,OAAD,CAAJ,CAAcrC,KAAd,KAAwBA,KAAK,CAACA,KAApC,EAA0C;AACxCqC,MAAAA,OAAO,GAAGC,SAAS,CAACF,IAAI,CAACN,MAAN,CAAnB;AACD;;AACDpB,IAAAA,OAAO,CAACC,GAAR,CAAYyB,IAAI,CAACC,OAAD,CAAJ,CAAcrC,KAA1B;AACAC,IAAAA,QAAQ,CAACmC,IAAI,CAACC,OAAD,CAAL,CAAR;AACD,GAPD;;AASA,QAAMC,SAAS,GAAKC,SAAD,IAAe;AAChC;AACA7B,IAAAA,OAAO,CAACC,GAAR,CAAY4B,SAAZ;;AACA,QAAG,CAACA,SAAJ,EAAe;AACb;AACD;;AACD,WAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAAC5D,MAAL,KAAc2D,SAAzB,CAAP;AACD,GAPD;;AASA,WAASG,qBAAT,GAAgC;AAC9BP,IAAAA,cAAc,CAACrC,UAAD,CAAd;AAED;;AACD,WAAS6C,SAAT,GAAoB;AAClBnC,IAAAA,OAAO;AACR;;AAGD,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAqB,IAAA,EAAE,EAAC,WAAxB;AAAA,4BACE,QAAC,QAAD;AACE,MAAA,KAAK,EAAER,KADT;AAEE,MAAA,aAAa,EAAE,MAAMmC,cAAc,CAACrC,UAAD;AAFrC;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,MAAD;AAAQ,MAAA,iBAAiB,EAAC,YAA1B;AAAuC,MAAA,YAAY,EAAE4C;AAArD;AAAA;AAAA;AAAA;AAAA,YALF,eAME,QAAC,UAAD;AAAY,MAAA,YAAY,EAAEC;AAA1B;AAAA;AAAA;AAAA;AAAA,YANF,eAOE;AAAQ,MAAA,OAAO,EAAE,MAAM9C,OAAO,CAAC+C,IAAI,IAAI,CAACA,IAAV,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,EASGhD,IAAI,iBAAI,QAAC,KAAD;AAAO,MAAA,KAAK,EAAEQ,WAAW,CAAC,CAAD;AAAzB;AAAA;AAAA;AAAA;AAAA,YATX,eAWE;AAAA,gBACCE,SAAS,CAACa,GAAV,CAAc,CAACnB,KAAD,EAAQ6C,KAAR,kBACG;AAAA,kBACG7C;AADH;AAAA;AAAA;AAAA;AAAA,cADjB;AADD;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD;;GA3JQL,G;;KAAAA,G;AA6JT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport Button from './components/Button';\nimport React, { useEffect, useState } from \"react\";\nimport random from 'random'\nimport QuoteDiv from \"./components/Quote\";\nimport Block from \"./components/Block\";\n\nimport LikeButton from './components/LikeButton';\nimport { AxiosProvider, Request, Get, Delete, Head, Post, Put, Patch, withAxios } from 'react-axios'\nimport axios from 'axios';\n\n\nimport Slider from \"react-slick\";\n\n\n\nfunction App() {\n  //const [showDiv, setState] = useState();\n  const [show, setShow] = useState(false);\n\n  //const mongoose = require('mongoose');\n  \n  //const url = 'mongodb+srv://bito94:bH7WWgibBDj29DHI@cluster0.c79rp.mongodb.net/myFirstDatabase?retryWrites=true&w=majority';\n  //const client = new MongoClient(url);\n  //mongoose.connect(url)\n  /*\n  async function run() {\n    try {\n        await client.connect();\n        console.log(\"Connected correctly to server\");\n    } catch (err) {\n        console.log(err.stack);\n    }\n    finally {\n        await client.close();\n    }\n  }\n  run().catch(console.dir);\n  */\n\n\n\n  //state variables\n  const [quotesList, setQuotesList] = useState([]);\n  const [quote, setQuote] = useState({});\n  const [like, setLike] = useState([]);\n  const [likedQuotes, setLikedQuotes] = useState([]);\n\n  const [listItems, setListItems] = useState([]);\n\n\n\n  \n\n  const addLike = () => {\n    let newCount = 1;\n    console.log(newCount);\n    setLike(newCount);\n    sendGetRequest();\n  }\n  //returns liked quotes\n  const sendGetRequest = async () => {\n    try {\n        const resp = await axios.get('http://localhost:5000/personnel');\n        //console.log(resp.data);\n        console.log(\"sendgetreq\")\n        setLikedQuotes(resp.data)\n        console.log(resp.data)\n        //setListItems(resp.data)\n        const das = resp.data[0];\n        console.log(resp.data)\n        \n        setListItems(Object.values(das).map((ds) =>\n          <li>{ds}</li>\n        ))\n\n        /////////////////\n        const allQuestions = [];\n        const allChoices = [];\n\n        resp.data.forEach(({ question, choices }) => {\n          allQuestions.push(question);\n          allChoices.push(choices);\n        });\n        //const newmap = JSON.parse(resp.data[0]);\n        /////console.log(newmap)\n        //const newmap1 = newmap.map(( newmap) => \n        //  <li>{newmap}</li>\n        //);\n        //setListItems(newmap1)\n    } catch (err) {\n        // Handle Error Here\n        console.error(err);\n    }\n};\n\n  let quoteList;\n  \n  //this is use to run on start\n  useEffect(async () => {\n    if (quotesList.length === 0) {\n      const quotesResult = await fetch(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\");\n      //console.log(quotesResult.json());\n      quoteList = await (quotesResult.json());\n      \n      setQuotesList(quoteList.quotes)\n\n    }\n    else{\n      setRandomQuote(quotesList)\n      sendGetRequest()\n    }\n\n    //if quoteslist isnt added here, it keeps rerendering forever\n  },[quotesList])\n////////////////////////\nconsole.log(likedQuotes[0])\nconsole.log(quote)\n  const setRandomQuote = list => {\n    const randNum = randIndex(list.length);\n    while(list[randNum].quote === quote.quote){\n      randNum = randIndex(list.length);\n    }\n    console.log(list[randNum].quote)\n    setQuote(list[randNum])\n  }\n  \n  const randIndex =  (quotesLen) => {\n    //console.log(quoteList.quotes.length)\n    console.log(quotesLen)\n    if(!quotesLen) {\n      return;\n    }\n    return Math.floor(Math.random()*quotesLen);\n  }\n\n  function nextQuoteClickHandler(){\n    setRandomQuote(quotesList)\n    \n  }\n  function clickLike(){\n    addLike()\n  }\n\n \n  return (\n    <div className=\"App\" id=\"quote-box\" >\n      <QuoteDiv \n        value={quote}\n        onQuoteChange={() => setRandomQuote(quotesList)}\n      />\n      <Button buttonDisplayName=\"Next Quote\" clickHandler={nextQuoteClickHandler}/>\n      <LikeButton clickHandler={clickLike}/>\n      <button onClick={() => setShow(prev => !prev)}>Show liked quotes</button>\n      {/*<button onClick={newClick()}>Show liked quotes</button>*/}\n      {show && <Block value={likedQuotes[0]}></Block>}\n      {/*<ul>{listItems}</ul>*/}\n      <ul>\n      {listItems.map((quote, index) => (\n                        <div>\n                          {quote}\n                        </div>\n                    )\n                )}\n      </ul>\n      \n      \n      \n      \n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}