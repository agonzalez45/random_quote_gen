{"ast":null,"code":"var _jsxFileName = \"/Users/adolfogonzalez/Desktop/bottombar/random-quote-machine_test/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Button from './components/Button';\nimport React, { useEffect, useState } from \"react\";\nimport random from 'random';\nimport QuoteDiv from \"./components/Quote\";\nimport Block from \"./components/Block\";\nimport LikeButton from './components/LikeButton';\nimport { AxiosProvider, Request, Get, Delete, Head, Post, Put, Patch, withAxios } from 'react-axios';\nimport axios from 'axios';\nimport Slider from \"react-slick\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //const [showDiv, setState] = useState();\n  const [show, setShow] = useState(false); //const mongoose = require('mongoose');\n  //state variables\n\n  const [quotesList, setQuotesList] = useState([]);\n  const [quote, setQuote] = useState({});\n  const [like, setLike] = useState([]);\n  const [likedQuotes, setLikedQuotes] = useState([]);\n  const [listItems, setListItems] = useState([]);\n  const [newList, setNewList] = useState({\n    quote: [],\n    author: []\n  });\n\n  const addLike = async () => {\n    const resp = await axios.post('http://localhost:5000/posting', {\n      quote: quote.quote,\n      author: quote.author\n    }); //setLikedQuotes(resp.data)\n\n    const nLst = newList;\n    nLst.allQuotes.push(quote.quote);\n    nLst.allAuthors.push(quote.author);\n    console.log(\"newList\");\n    console.log(nLst);\n    setNewList(nLst); //console.log(resp.data)\n    //setLikedQuotes()\n  };\n\n  const adddLike = event => {\n    event.preventDefault();\n    const resp = axios.post('http://localhost:5000/posting', {\n      quote: quote.quote,\n      author: quote.author\n    });\n    const updateArray = [...array];\n    updateArray.push(formVal);\n    console.log(updateArray);\n    setArray(updateArray);\n  };\n\n  function clearLikedQuotes() {\n    const resp = axios.get('http://localhost:5000/delete');\n    console.log(\"clearrrr!\");\n  } //returns liked quotes\n\n\n  const sendGetRequest = async () => {\n    try {\n      const resp = await axios.get('http://localhost:5000/personnel'); //console.log(resp.data);\n\n      console.log(\"sendgetreq\");\n      setLikedQuotes(resp.data); //setListItems(resp.data)\n\n      console.log(resp.data);\n      const allQuotes = [];\n      const allAuthors = [];\n      resp.data.forEach(({\n        quote,\n        author\n      }) => {\n        allQuotes.push(quote);\n        allAuthors.push(author);\n      });\n      console.log(allQuotes);\n      console.log(\"herereree\");\n      console.log(allAuthors);\n      setNewList({\n        allQuotes,\n        allAuthors\n      }); ////////////////\n\n      /*\n              setListItems(allQuotes.map((value, index) =>\n              {const linkContent = allAuthors[index]},\n                <li>{allQuotes}</li>\n              ))\n              */\n\n      setListItems(allQuotes.map((value, index) => {\n        const linkContent = allAuthors[index];\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [value, \" - \", linkContent]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this);\n      })); //const newmap = JSON.parse(resp.data[0]);\n      /////console.log(newmap)\n      //const newmap1 = newmap.map(( newmap) => \n      //  <li>{newmap}</li>\n      //);\n      //setListItems(newmap1)\n    } catch (err) {\n      // Handle Error Here\n      console.error(err);\n    }\n  };\n\n  let quoteList; //this is use to run on start\n\n  useEffect(async () => {\n    if (quotesList.length === 0) {\n      const quotesResult = await fetch(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"); //console.log(quotesResult.json());\n\n      quoteList = await quotesResult.json();\n      setQuotesList(quoteList.quotes);\n      console.log(\"useEffect!!!!\");\n    } else {\n      setRandomQuote(quotesList);\n      sendGetRequest();\n      console.log(\"useEffect!!!!\");\n    } //if quoteslist isnt added here, it keeps rerendering forever\n\n  }, [quotesList]); ////////////////////////\n\n  console.log(quote);\n\n  const setRandomQuote = list => {\n    const randNum = randIndex(list.length);\n\n    while (list[randNum].quote === quote.quote) {\n      randNum = randIndex(list.length);\n    }\n\n    console.log(list[randNum].quote);\n    setQuote(list[randNum]);\n  };\n\n  const randIndex = quotesLen => {\n    //console.log(quoteList.quotes.length)\n    console.log(quotesLen);\n\n    if (!quotesLen) {\n      return;\n    }\n\n    return Math.floor(Math.random() * quotesLen);\n  };\n\n  function nextQuoteClickHandler() {\n    setRandomQuote(quotesList);\n  }\n\n  function clickLike() {\n    addLike();\n  }\n\n  console.log(newList.allAuthors);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    id: \"quote-box\",\n    children: [/*#__PURE__*/_jsxDEV(QuoteDiv, {\n      value: quote,\n      onQuoteChange: () => setRandomQuote(quotesList)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      buttonDisplayName: \"Next Quote\",\n      clickHandler: nextQuoteClickHandler,\n      className: \"button\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LikeButton, {\n      clickHandler: clickLike,\n      className: \"button\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShow(prev => !prev),\n      className: \"button\",\n      children: \"Show liked quotes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clearLikedQuotes,\n      className: \"button\",\n      children: \"Clear Quotes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), show && /*#__PURE__*/_jsxDEV(Block, {\n      value: listItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"pb591DWJPGEYp6JEc1yxjWM5dew=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/adolfogonzalez/Desktop/bottombar/random-quote-machine_test/src/App.jsx"],"names":["Button","React","useEffect","useState","random","QuoteDiv","Block","LikeButton","AxiosProvider","Request","Get","Delete","Head","Post","Put","Patch","withAxios","axios","Slider","App","show","setShow","quotesList","setQuotesList","quote","setQuote","like","setLike","likedQuotes","setLikedQuotes","listItems","setListItems","newList","setNewList","author","addLike","resp","post","nLst","allQuotes","push","allAuthors","console","log","adddLike","event","preventDefault","updateArray","array","formVal","setArray","clearLikedQuotes","get","sendGetRequest","data","forEach","map","value","index","linkContent","err","error","quoteList","length","quotesResult","fetch","json","quotes","setRandomQuote","list","randNum","randIndex","quotesLen","Math","floor","nextQuoteClickHandler","clickLike","prev"],"mappings":"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","sourcesContent":["import './App.css';\nimport Button from './components/Button';\nimport React, { useEffect, useState } from \"react\";\nimport random from 'random'\nimport QuoteDiv from \"./components/Quote\";\nimport Block from \"./components/Block\";\n\nimport LikeButton from './components/LikeButton';\nimport { AxiosProvider, Request, Get, Delete, Head, Post, Put, Patch, withAxios } from 'react-axios'\nimport axios from 'axios';\n\n\nimport Slider from \"react-slick\";\n\n\n\nfunction App() {\n  //const [showDiv, setState] = useState();\n  const [show, setShow] = useState(false);\n\n  //const mongoose = require('mongoose');\n  \n \n\n  //state variables\n  const [quotesList, setQuotesList] = useState([]);\n  const [quote, setQuote] = useState({});\n  const [like, setLike] = useState([]);\n  const [likedQuotes, setLikedQuotes] = useState([]);\n\n  const [listItems, setListItems] = useState([]);\n\n  const [newList, setNewList] = useState({quote:[], author:[]});\n\n\n  const addLike = async () => {\n    const resp = await axios.post('http://localhost:5000/posting', {quote: quote.quote, author: quote.author});\n    //setLikedQuotes(resp.data)\n    const nLst = newList\n    nLst.allQuotes.push(quote.quote)\n    nLst.allAuthors.push(quote.author)\n    console.log(\"newList\")\n    console.log(nLst)\n    setNewList(nLst)\n    //console.log(resp.data)\n    //setLikedQuotes()\n  }\n\n  const adddLike = event => {\n    event.preventDefault();\n    const resp = axios.post('http://localhost:5000/posting', {quote: quote.quote, author: quote.author});\n\n    const updateArray = [...array];\n    updateArray.push(formVal);\n    console.log(updateArray);\n    setArray(updateArray);\n  };\n\n  function clearLikedQuotes(){\n    const resp =  axios.get('http://localhost:5000/delete');\n    console.log(\"clearrrr!\")\n  }\n  //returns liked quotes\n  const sendGetRequest = async () => {\n    try {\n        const resp = await axios.get('http://localhost:5000/personnel');\n        //console.log(resp.data);\n        console.log(\"sendgetreq\")\n        setLikedQuotes(resp.data)\n        //setListItems(resp.data)\n        console.log(resp.data)\n        \n        \n        const allQuotes = [];\n        const allAuthors = [];\n\n        resp.data.forEach(({ quote, author }) => {\n          allQuotes.push(quote);\n          allAuthors.push(author);\n        });\n        console.log(allQuotes)\n        console.log(\"herereree\")\n        console.log(allAuthors)\n        setNewList({allQuotes, allAuthors})\n\n////////////////\n/*\n        setListItems(allQuotes.map((value, index) =>\n        {const linkContent = allAuthors[index]},\n          <li>{allQuotes}</li>\n        ))\n        */\n        setListItems(allQuotes.map((value, index) => {\n          const linkContent = allAuthors[index];\n          return (\n            <li>{value} - {linkContent}</li>\n          );\n        }))\n\n        //const newmap = JSON.parse(resp.data[0]);\n        /////console.log(newmap)\n        //const newmap1 = newmap.map(( newmap) => \n        //  <li>{newmap}</li>\n        //);\n        //setListItems(newmap1)\n    } catch (err) {\n        // Handle Error Here\n        console.error(err);\n    }\n};\n\n  let quoteList;\n  \n  //this is use to run on start\n  useEffect(async () => {\n    if (quotesList.length === 0) {\n      const quotesResult = await fetch(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\");\n      //console.log(quotesResult.json());\n      quoteList = await (quotesResult.json());\n      \n      setQuotesList(quoteList.quotes)\n      console.log(\"useEffect!!!!\")\n    }\n    else{\n      setRandomQuote(quotesList)\n      sendGetRequest()\n      console.log(\"useEffect!!!!\")\n\n    }\n\n    //if quoteslist isnt added here, it keeps rerendering forever\n  },[quotesList])\n////////////////////////\nconsole.log(quote)\n  const setRandomQuote = list => {\n    const randNum = randIndex(list.length);\n    while(list[randNum].quote === quote.quote){\n      randNum = randIndex(list.length);\n    }\n    console.log(list[randNum].quote)\n    setQuote(list[randNum])\n  }\n  \n  const randIndex =  (quotesLen) => {\n    //console.log(quoteList.quotes.length)\n    console.log(quotesLen)\n    if(!quotesLen) {\n      return;\n    }\n    return Math.floor(Math.random()*quotesLen);\n  }\n\n  function nextQuoteClickHandler(){\n    setRandomQuote(quotesList)\n    \n  }\n  function clickLike(){\n    addLike()\n  }\n  \n  console.log(newList.allAuthors)\n  return (\n    <div className=\"App\" id=\"quote-box\" >\n      <QuoteDiv \n        value={quote}\n        onQuoteChange={() => setRandomQuote(quotesList)}\n      />\n\n      <Button buttonDisplayName=\"Next Quote\" clickHandler={nextQuoteClickHandler} className=\"button\"/>\n      <LikeButton clickHandler={clickLike} className=\"button\"/>\n      \n\n      <button onClick={() => setShow(prev => !prev)} className=\"button\">Show liked quotes</button>\n      <button onClick={clearLikedQuotes} className=\"button\">Clear Quotes</button>\n\n      {show && <Block value={listItems}></Block>}\n      \n      \n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}