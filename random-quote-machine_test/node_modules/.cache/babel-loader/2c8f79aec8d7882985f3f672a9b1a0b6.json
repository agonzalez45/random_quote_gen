{"ast":null,"code":"var _jsxFileName = \"/Users/adolfogonzalez/Desktop/prenda/random-quote-machine/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Button from './components/Button';\nimport React, { useEffect, useState } from \"react\";\nimport random from 'random';\nimport QuoteDiv from \"./components/Quote\";\nimport LikeButton from './components/LikeButton';\nimport mongoose from 'mongoose';\nimport { MongoClient } from \"mongodb\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //const mongoose = require('mongoose');\n  const url = 'mongodb+srv://bito94:bH7WWgibBDj29DHI@cluster0.c79rp.mongodb.net/myFirstDatabase?retryWrites=true&w=majority'; //const client = new MongoClient(url);\n\n  mongoose.connect(url);\n  /*\n  async function run() {\n    try {\n        await client.connect();\n        console.log(\"Connected correctly to server\");\n    } catch (err) {\n        console.log(err.stack);\n    }\n    finally {\n        await client.close();\n    }\n  }\n  run().catch(console.dir);\n  */\n  //state variables\n\n  const [quotesList, setQuotesList] = useState([]);\n  const [quote, setQuote] = useState({});\n  const [like, setLike] = useState([]);\n\n  const addLike = () => {\n    let newCount = 1;\n    console.log(newCount);\n    setLike(newCount);\n  };\n\n  let quoteList; //this is use to run on start\n\n  useEffect(async () => {\n    if (quotesList.length === 0) {\n      const quotesResult = await fetch(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"); //console.log(quotesResult.json());\n\n      quoteList = await quotesResult.json();\n      setQuotesList(quoteList.quotes);\n    } else {\n      setRandomQuote(quotesList);\n    } //if quoteslist isnt added here, it keeps rerendering forever\n\n  }, [quotesList]);\n\n  const setRandomQuote = list => {\n    const randNum = randIndex(list.length);\n\n    while (list[randNum].quote === quote.quote) {\n      randNum = randIndex(list.length);\n    }\n\n    console.log(list[randNum].quote);\n    setQuote(list[randNum]);\n  };\n\n  const randIndex = quotesLen => {\n    //console.log(quoteList.quotes.length)\n    console.log(quotesLen);\n\n    if (!quotesLen) {\n      return;\n    }\n\n    return Math.floor(Math.random() * quotesLen);\n  };\n\n  function nextQuoteClickHandler() {\n    setRandomQuote(quotesList);\n  }\n\n  function clickLike() {\n    addLike();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    id: \"quote-box\",\n    children: [/*#__PURE__*/_jsxDEV(QuoteDiv, {\n      value: quote,\n      onQuoteChange: () => setRandomQuote(quotesList)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      buttonDisplayName: \"Next Quote\",\n      clickHandler: nextQuoteClickHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LikeButton, {\n      clickHandler: clickLike\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"/Ah9ouQZO0gI6djYLa9KzX91WOc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/adolfogonzalez/Desktop/prenda/random-quote-machine/src/App.jsx"],"names":["Button","React","useEffect","useState","random","QuoteDiv","LikeButton","mongoose","MongoClient","App","url","connect","quotesList","setQuotesList","quote","setQuote","like","setLike","addLike","newCount","console","log","quoteList","length","quotesResult","fetch","json","quotes","setRandomQuote","list","randNum","randIndex","quotesLen","Math","floor","nextQuoteClickHandler","clickLike"],"mappings":"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","sourcesContent":["import './App.css';\nimport Button from './components/Button';\nimport React, { useEffect, useState } from \"react\";\nimport random from 'random'\nimport QuoteDiv from \"./components/Quote\";\nimport LikeButton from './components/LikeButton';\nimport mongoose from 'mongoose';\nimport { MongoClient } from \"mongodb\";\n\nfunction App() {\n  //const mongoose = require('mongoose');\n  \n  const url = 'mongodb+srv://bito94:bH7WWgibBDj29DHI@cluster0.c79rp.mongodb.net/myFirstDatabase?retryWrites=true&w=majority';\n  //const client = new MongoClient(url);\n  mongoose.connect(url)\n  /*\n  async function run() {\n    try {\n        await client.connect();\n        console.log(\"Connected correctly to server\");\n    } catch (err) {\n        console.log(err.stack);\n    }\n    finally {\n        await client.close();\n    }\n  }\n  run().catch(console.dir);\n  */\n\n\n\n  //state variables\n  const [quotesList, setQuotesList] = useState([]);\n  const [quote, setQuote] = useState({});\n  const [like, setLike] = useState([]);\n\n  \n\n  const addLike = () => {\n    let newCount = 1;\n    console.log(newCount);\n    setLike(newCount);\n  }\n\n\n  let quoteList;\n  \n  //this is use to run on start\n  useEffect(async () => {\n    if (quotesList.length === 0) {\n      const quotesResult = await fetch(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\");\n      //console.log(quotesResult.json());\n      quoteList = await (quotesResult.json());\n      \n      setQuotesList(quoteList.quotes)\n    }\n    else{\n      setRandomQuote(quotesList)\n    }\n    //if quoteslist isnt added here, it keeps rerendering forever\n  },[quotesList])\n\n\n  const setRandomQuote = list => {\n    const randNum = randIndex(list.length);\n    while(list[randNum].quote === quote.quote){\n      randNum = randIndex(list.length);\n    }\n    console.log(list[randNum].quote)\n    setQuote(list[randNum])\n  }\n  \n  const randIndex =  (quotesLen) => {\n    //console.log(quoteList.quotes.length)\n    console.log(quotesLen)\n    if(!quotesLen) {\n      return;\n    }\n    return Math.floor(Math.random()*quotesLen);\n  }\n\n  function nextQuoteClickHandler(){\n    setRandomQuote(quotesList)\n    \n  }\n  function clickLike(){\n    addLike()\n  }\n  \n  return (\n    <div className=\"App\" id=\"quote-box\" >\n      <QuoteDiv \n        value={quote}\n        onQuoteChange={() => setRandomQuote(quotesList)}\n      />\n      <Button buttonDisplayName=\"Next Quote\" clickHandler={nextQuoteClickHandler}/>\n      <LikeButton clickHandler={clickLike}/>\n      {/*<div>\n          <button\n            className=\"button\"\n            onClick={addLike}\n          >addlike\n          </button>\n      </div>*/}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}